// <auto-generated />
using Assessment.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assessment.Models.Migrations
{
    [DbContext(typeof(UnitConversionDbContext))]
    [Migration("20241220131106_FinalMigraiton")]
    partial class FinalMigraiton
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assessment.Models.ConversionHistory", b =>
                {
                    b.Property<int>("ConversionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversionHistoryId"));

                    b.Property<double>("InputValue")
                        .HasColumnType("float");

                    b.Property<double>("OutputValue")
                        .HasColumnType("float");

                    b.Property<int>("UnitConversionRatesId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConversionHistoryId");

                    b.HasIndex("UnitConversionRatesId");

                    b.ToTable("ConversionHistories");
                });

            modelBuilder.Entity("Assessment.Models.UnitConversionRates", b =>
                {
                    b.Property<int>("UnitConversionRatesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitConversionRatesId"));

                    b.Property<double>("ConversionFactor")
                        .HasColumnType("float");

                    b.Property<int>("SourceUnitDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("TargetUnitDetailsId")
                        .HasColumnType("int");

                    b.HasKey("UnitConversionRatesId");

                    b.HasIndex("SourceUnitDetailsId")
                        .IsUnique();

                    b.HasIndex("TargetUnitDetailsId")
                        .IsUnique();

                    b.ToTable("ConversionRates");
                });

            modelBuilder.Entity("Assessment.Models.UnitDetails", b =>
                {
                    b.Property<int>("UnitDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitDetailsId"));

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int");

                    b.HasKey("UnitDetailsId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("UnitDetails");
                });

            modelBuilder.Entity("Assessment.Models.UnitTypes", b =>
                {
                    b.Property<int>("UnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitTypeId"));

                    b.Property<string>("UnitTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitTypeId");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("Assessment.Models.ConversionHistory", b =>
                {
                    b.HasOne("Assessment.Models.UnitConversionRates", "ConversionRateUsed")
                        .WithMany()
                        .HasForeignKey("UnitConversionRatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversionRateUsed");
                });

            modelBuilder.Entity("Assessment.Models.UnitConversionRates", b =>
                {
                    b.HasOne("Assessment.Models.UnitDetails", "Source")
                        .WithOne()
                        .HasForeignKey("Assessment.Models.UnitConversionRates", "SourceUnitDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Assessment.Models.UnitDetails", "Target")
                        .WithOne()
                        .HasForeignKey("Assessment.Models.UnitConversionRates", "TargetUnitDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Assessment.Models.UnitDetails", b =>
                {
                    b.HasOne("Assessment.Models.UnitTypes", "UnitType")
                        .WithMany("unitDetails")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("Assessment.Models.UnitTypes", b =>
                {
                    b.Navigation("unitDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
